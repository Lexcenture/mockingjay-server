Elm.App = Elm.App || {};
Elm.App.make = function (_elm) {
   "use strict";
   _elm.App = _elm.App || {};
   if (_elm.App.values) return _elm.App.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Http = Elm.Http.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Model = Elm.Model.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm),
   $View = Elm.View.make(_elm);
   var _op = {};
   var update = F2(function (action,model) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "GetEndpoints": return {ctor: "_Tuple2"
                                   ,_0: A2($Maybe.withDefault,
                                   model,
                                   A2($Maybe.map,function (endpoint) {    return _U.update(model,{endpoints: endpoint});},_p0._0))
                                   ,_1: $Effects.none};
         case "InputName": var thingToUpdate = model.newEndpoint;
           var newEndpoint = _U.update(thingToUpdate,{name: _p0._0});
           return {ctor: "_Tuple2",_0: _U.update(model,{newEndpoint: newEndpoint}),_1: $Effects.none};
         case "InputRequestURI": var endpointToUpdate = model.newEndpoint;
           var requestToUpdate = endpointToUpdate.request;
           var updatedRequest = _U.update(requestToUpdate,{uri: _p0._0});
           var updatedEndpoint = _U.update(endpointToUpdate,{request: updatedRequest});
           return {ctor: "_Tuple2",_0: _U.update(model,{newEndpoint: updatedEndpoint}),_1: $Effects.none};
         case "InputResponseBody": var endpointToUpdate = model.newEndpoint;
           var responseToUpdate = endpointToUpdate.response;
           var updatedResponse = _U.update(responseToUpdate,{body: _p0._0});
           var updatedEndpoint = _U.update(endpointToUpdate,{response: updatedResponse});
           return {ctor: "_Tuple2",_0: _U.update(model,{newEndpoint: updatedEndpoint}),_1: $Effects.none};
         case "EndpointCreated": return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         default: var request = $Effects.task(A2($Task.map,
           function (result) {
              return $Model.EndpointCreated;
           },
           $Task.toMaybe(A2($Http.send,$Http.defaultSettings,$Model.createEndpointRequest(model.newEndpoint)))));
           return {ctor: "_Tuple2",_0: _U.update(model,{endpoints: A2($List._op["::"],model.newEndpoint,model.endpoints)}),_1: request};}
   });
   var app = $StartApp.start({init: $Model.init,update: update,view: $View.view,inputs: _U.list([])});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   return _elm.App.values = {_op: _op,update: update,app: app,main: main};
};